diff --git a/node_modules/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaProviderManager.kt b/node_modules/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaProviderManager.kt
index de6f685..10fbe01 100644
--- a/node_modules/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaProviderManager.kt
+++ b/node_modules/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaProviderManager.kt
@@ -4,38 +4,41 @@ import com.facebook.react.bridge.ReactContext
 import com.facebook.react.module.annotations.ReactModule
 import com.facebook.react.uimanager.ThemedReactContext
 import com.facebook.react.uimanager.UIManagerHelper
-import com.facebook.react.uimanager.ViewGroupManager
-import com.facebook.react.viewmanagers.RNCSafeAreaProviderManagerDelegate
+import com.facebook.react.uimanager.ViewManagerDelegate
 import com.facebook.react.viewmanagers.RNCSafeAreaProviderManagerInterface
+import com.facebook.react.views.view.ReactViewGroup
+import com.facebook.react.views.view.ReactViewManager
 
 @ReactModule(name = SafeAreaProviderManager.REACT_CLASS)
 class SafeAreaProviderManager :
-    ViewGroupManager<SafeAreaProvider>(), RNCSafeAreaProviderManagerInterface<SafeAreaProvider> {
-  private val mDelegate = RNCSafeAreaProviderManagerDelegate(this)
+    ReactViewManager(), RNCSafeAreaProviderManagerInterface<SafeAreaProvider> {
 
-  override fun getDelegate() = mDelegate
+    override fun getDelegate(): ViewManagerDelegate<ReactViewGroup>? = null
 
-  override fun getName() = REACT_CLASS
+    override fun getName() = REACT_CLASS
 
-  public override fun createViewInstance(context: ThemedReactContext) = SafeAreaProvider(context)
+    override fun createViewInstance(context: ThemedReactContext) = SafeAreaProvider(context)
 
-  override fun getExportedCustomDirectEventTypeConstants() =
-      mutableMapOf(
-          InsetsChangeEvent.EVENT_NAME to mutableMapOf("registrationName" to "onInsetsChange"))
+    override fun getExportedCustomDirectEventTypeConstants() =
+        mutableMapOf(
+            InsetsChangeEvent.EVENT_NAME to mutableMapOf("registrationName" to "onInsetsChange")
+        )
 
-  override fun addEventEmitters(reactContext: ThemedReactContext, view: SafeAreaProvider) {
-    super.addEventEmitters(reactContext, view)
-    view.setOnInsetsChangeHandler(::handleOnInsetsChange)
-  }
+    override fun addEventEmitters(reactContext: ThemedReactContext, view: ReactViewGroup) {
+        super.addEventEmitters(reactContext, view);
+        if (view is SafeAreaProvider) {
+            view.setOnInsetsChangeHandler(::handleOnInsetsChange)
+        }
+    }
 
-  companion object {
-    const val REACT_CLASS = "RNCSafeAreaProvider"
-  }
+    companion object {
+        const val REACT_CLASS = "RNCSafeAreaProvider"
+    }
 }
 
 private fun handleOnInsetsChange(view: SafeAreaProvider, insets: EdgeInsets, frame: Rect) {
-  val reactContext = view.context as ReactContext
-  val reactTag = view.id
-  UIManagerHelper.getEventDispatcherForReactTag(reactContext, reactTag)
-      ?.dispatchEvent(InsetsChangeEvent(getSurfaceId(reactContext), reactTag, insets, frame))
+    val reactContext = view.context as ReactContext
+    val reactTag = view.id
+    UIManagerHelper.getEventDispatcherForReactTag(reactContext, reactTag)
+        ?.dispatchEvent(InsetsChangeEvent(getSurfaceId(reactContext), reactTag, insets, frame))
 }
